09-Jun-2025     Added the ability to display a custom metadata tag called Title.

08-Jun-2025     Reworked how screenshots are handled.  New version now uses vid.frame_surf instead of saving the
                display surface.  This means that none of the GUI controls, boxes, etc will get saved.
                Added ALT+s which is what I call saveMode.  All this really does is remaps the <SPACEBAR> key to
                do a screenshot.  Pressing ALT+s again undoes the remap and the <SPACEBAR> reverts back to the pause video
                function.

                Added pygame dialog boxes along with better error handling. The screenshot function appears to be much faster
                now, due to when the pygame dialog box is being shown.  Screen shots

06-Jun-2025     The videoPlayBar class which consists of the video playback bar, should scale from WUXGA to 4KUHD (I think).
                Still need to work out on how to easily test the scaling.  I'm not too keen on having to plug in the old
                1920x1200 display to test with.

03-Jun-2025     Added big-screen support 3840x2160.  Expect this to break just about everything that isn't 4K.  This
                is definitely work in progress.  Scaling up from WUXGA through 4K_UHD in pygame isn't all that easy
                mainly because pygame is all brand new for me.  Will have to develop some test methods to test scaling
                at the lower resolutions.


01-Jun-2025     Added a new Help window.  It is envoked from the keyboard by pressing 'h'.  Pretty much all the
                keyboard and mouse functions are listed there and are available while the help is being displayed.
                The two mouse long click buttons (left and right) which advance to the next or previous video are
                disabled while the Help window is being displayed.  This is to avoid conflicts with the OK button.

                Also made modifications to the Video metadata window. As with the Help window, the two mouse long
                click buttons (left and right) are disabled while the window is being displayed.
                If the help window is being displayed and the user presses the 'i' key to view the video metadata
                window,  the, help window is first closed  before the help window is displayed.  The same is true
                if the metadata dialog box is being displayed  and the help dialog is envoked.

                Cleaned up the event handler code.

                In general, been tweaking the various dialog boxes trying to make them all the same.  This is
                work in progress and likely will for some time.

29-May-2025     More refinements on  the video playback bar.  It is still in the develomental stages so things are not
                very likely to work.  Volume  does not update correctly (yet).   No mouse drag yet on the slider either.
                Play/Pause work, Stop doesn't.  Previous / Next work as expected, as do the +/- icons for the playback
                speed.  The loop icon works too. Clicking on the speaker should mute/unmute the audio.

                More transparent gradient refinements on the seek progress bar, as well as the video metadata window.
                Attempted to add tooltips to the playback bar icons, but it is all disabled.  Remember that pyvid2 aims
                to be a "multimedia presentation" playback tool.  There are too many really good video players out there
                to want to compete with any of them.  At some point, pyvid2 will morph into a client/server model
                capable of driving dozens of displays spread out across multiple video cards.  Right now though, it is
                primarly a learning tool for me.

28-May-2025	    Added the very rough draft beginnings a of a true video playback bar with functional icons ETC.  Note
                that in this commit, the  playback bar is not functional.  That said, since it is semi-transparent,
                It overlays on top of the current text playback bar which remains functional.  There are issues with
                pygame.rect.collidepoint() functionality in the new class, and this is holding up development until
                the root cause is found. Made some small refinements to the Video Splash window as well.


25-May-2025:    Fixed a major goof-up with pyVid2 resources.  The paths were
                Hardcoded.  Resources, which are found in the Resources directory,
	            are icons the application uses.  PyVids uses the following path
	            to find its resources:  $HOME/.local/share/pyVid.  Currently,
	            this directory tree consists of the following subdirs:

                1. fonts           All application fonts
                2. Resources       All Icons
                3. thumbs          Thumbnail cache directory used by cachetools.LRUCache()

                Added --aTrack which accepts an integer as a parameter. This allows selection of a specific audio track
                in a video if it has more than one.  Note this has very limited usefulness  and currently there is no
                validation checking performed. If you select a track that does not exist, you will be greeted with a
                nice black screen but no playing video. The default is 0.

                Added a video metadata class. It is envoked by pressing the 'i' key once a video is up and playing.
                This gives very basic video metadata along with a nice OK button to make it disappear.  This is very
                raw.  There is also a tooltip  on the videoname.ext (top line).  If the filename is too large,
                it will be truncated with an ellipsis (...) indicating as such.  However, hovering the mouse pointer
                over any part of the filename, will give you a nice pretty green background tooltip with black text.
                Wow!  Groovy baby!  This is all very rough alpha level. Expect using it to crash the program unexpectedly.
                Works for the most part (I guess).

                Pygame is a pain.  No wrappers or helper functions making it intutitive and easier to use. That means I
                must start writing my own.  *sigh*.


My 7 year old daughter: "What cha doin' mommy?"
Me: "Writing a video playback program in Python :-)"  
Daughter: "Why?!??!"

My kid has a more of a clue than mommy. 

